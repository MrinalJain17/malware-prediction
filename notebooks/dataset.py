from pathlib import Path

import pandas as pd

columns = {
    "ProductName": "category",
    "EngineVersion": "category",
    "AppVersion": "category",
    "AvSigVersion": "category",
    "IsBeta": "category",
    "RtpStateBitfield": "category",
    "IsSxsPassiveMode": "category",
    "DefaultBrowsersIdentifier": "category",
    "AVProductStatesIdentifier": "category",
    "AVProductsInstalled": "category",
    "AVProductsEnabled": "category",
    "HasTpm": "category",
    "CountryIdentifier": "category",
    "CityIdentifier": "category",
    "OrganizationIdentifier": "category",
    "GeoNameIdentifier": "category",
    "LocaleEnglishNameIdentifier": "category",
    "Platform": "category",
    "Processor": "category",
    "OsVer": "category",
    "OsBuild": "category",
    "OsSuite": "category",
    "OsPlatformSubRelease": "category",
    "OsBuildLab": "category",
    "SkuEdition": "category",
    "IsProtected": "category",
    "AutoSampleOptIn": "category",
    "PuaMode": "category",
    "SMode": "category",
    "IeVerIdentifier": "category",
    "SmartScreen": "category",
    "Firewall": "category",
    "UacLuaenable": "category",
    "Census_MDC2FormFactor": "category",
    "Census_DeviceFamily": "category",
    "Census_OEMNameIdentifier": "category",
    "Census_OEMModelIdentifier": "category",
    "Census_ProcessorCoreCount": "float32",
    "Census_ProcessorManufacturerIdentifier": "category",
    "Census_ProcessorModelIdentifier": "category",
    "Census_ProcessorClass": "category",
    "Census_PrimaryDiskTotalCapacity": "float64",
    "Census_PrimaryDiskTypeName": "category",
    "Census_SystemVolumeTotalCapacity": "float64",
    "Census_HasOpticalDiskDrive": "category",
    "Census_TotalPhysicalRAM": "float32",
    "Census_ChassisTypeName": "category",
    "Census_InternalPrimaryDiagonalDisplaySizeInInches": "float32",
    "Census_InternalPrimaryDisplayResolutionHorizontal": "float32",
    "Census_InternalPrimaryDisplayResolutionVertical": "float32",
    "Census_PowerPlatformRoleName": "category",
    "Census_InternalBatteryType": "category",
    "Census_InternalBatteryNumberOfCharges": "float64",
    "Census_OSVersion": "category",
    "Census_OSArchitecture": "category",
    "Census_OSBranch": "category",
    "Census_OSBuildNumber": "category",
    "Census_OSBuildRevision": "category",
    "Census_OSEdition": "category",
    "Census_OSSkuName": "category",
    "Census_OSInstallTypeName": "category",
    "Census_OSInstallLanguageIdentifier": "category",
    "Census_OSUILocaleIdentifier": "category",
    "Census_OSWUAutoUpdateOptionsName": "category",
    "Census_IsPortableOperatingSystem": "category",
    "Census_GenuineStateName": "category",
    "Census_ActivationChannel": "category",
    "Census_IsFlightingInternal": "category",
    "Census_IsFlightsDisabled": "category",
    "Census_FlightRing": "category",
    "Census_ThresholdOptIn": "category",
    "Census_FirmwareManufacturerIdentifier": "category",
    "Census_FirmwareVersionIdentifier": "category",
    "Census_IsSecureBootEnabled": "category",
    "Census_IsWIMBootEnabled": "category",
    "Census_IsVirtualDevice": "category",
    "Census_IsTouchEnabled": "category",
    "Census_IsPenCapable": "category",
    "Census_IsAlwaysOnAlwaysConnectedCapable": "category",
    "Wdft_IsGamer": "category",
    "Wdft_RegionIdentifier": "category",
    "HasDetections": "category",
}


def save_as_feather(data, test=False, filename=None, **kwargs):
    """TODO

    """
    if isinstance(data, pd.DataFrame):
        assert (
            filename is not None
        ), "A file name is required to save the dataframe passed."
    else:
        if filename is None:
            filename = data
            
        global columns
        if test:
            columns.pop("HasDetections")

        data = pd.read_csv(data, usecols=columns.keys(), dtype=columns, **kwargs)

    path = Path(filename)
    path.parent.mkdir(parents=True, exist_ok=True)
    new_filename = path.parent / f"{path.stem}.feather"
    data.to_feather(new_filename)


def load_data(filename):
    """TODO"""
    data = pd.read_feather(filename)
    return data
