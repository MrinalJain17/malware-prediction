from pyspark.ml.feature import OneHotEncoder, StringIndexer

df = spark.read.load("datasets/microsoft_malware/train.csv", format = "csv", sep = ",", inferSchema = "true", header = "true")

# drop columns with NULL percentage > 50
df = df.drop(
    'DefaultBrowsersIdentifier',
    'PuaMode',
    'Census_ProcessorClass',
    'Census_InternalBatteryType',
    'Census_IsFlightingInternal',
    'Census_ThresholdOptIn',
    'Census_IsWIMBootEnabled'
)

# drop unique identifier column
df = df.drop(
    'MachineIdentifier'
)

df = df.fillna('NULL')

# columns for one hot encoding [distinct count: 3 - 15]
COLUMNS_OHE = [
    'ProductName',
    'RtpStateBitfield',
    'AVProductsInstalled',
    'AVProductsEnabled',
    'Platform',
    'Processor',
    'OsSuite',
    'OsPlatformSubRelease',
    'SkuEdition',
    'UacLuaenable',
    'Census_MDC2FormFactor',
    'Census_DeviceFamily',
    'Census_ProcessorManufacturerIdentifier',
    'Census_PrimaryDiskTypeName',
    'Census_PowerPlatformRoleName',
    'Census_OSArchitecture',
    'Census_OSInstallTypeName',
    'Census_OSWUAutoUpdateOptionsName',
    'Census_GenuineStateName',
    'Census_ActivationChannel',
    'Census_FlightRing',
    'Wdft_RegionIdentifier'
]

# columns for binary encoding [distinct count: > 15]
COLUMNS_BE = [
    'MachineIdentifier',
    'EngineVersion',
    'AppVersion',
    'AvSigVersion',
    'AVProductStatesIdentifier',
    'CountryIdentifier',
    'CityIdentifier',
    'OrganizationIdentifier',
    'GeoNameIdentifier',
    'LocaleEnglishNameIdentifier',
    'OsVer',
    'OsBuild',
    'OsBuildLab',
    'IeVerIdentifier',
    'SmartScreen',
    'Census_OEMNameIdentifier',
    'Census_OEMModelIdentifier',
    'Census_ProcessorCoreCount',
    'Census_ProcessorModelIdentifier',
    'Census_PrimaryDiskTotalCapacity',
    'Census_SystemVolumeTotalCapacity',
    'Census_TotalPhysicalRAM',
    'Census_ChassisTypeName',
    'Census_InternalPrimaryDiagonalDisplaySizeInInches',
    'Census_InternalPrimaryDisplayResolutionHorizontal',
    'Census_InternalPrimaryDisplayResolutionVertical',
    'Census_InternalBatteryNumberOfCharges',
    'Census_OSVersion',
    'Census_OSBranch',
    'Census_OSBuildNumber',
    'Census_OSBuildRevision',
    'Census_OSEdition',
    'Census_OSSkuName',
    'Census_OSInstallLanguageIdentifier',
    'Census_OSUILocaleIdentifier',
    'Census_FirmwareManufacturerIdentifier',
    'Census_FirmwareVersionIdentifier'
]

for col in COLUMNS_OHE:
    stringIndexer = StringIndexer(inputCol = col, outputCol = col + "_INDEX")
    model = stringIndexer.fit(df)
    indexed = model.transform(df)
    
    encoder = OneHotEncoder(inputCol = col + "_INDEX", outputCol = col + "_VEC")
    df = encoder.transform(indexed)
    print('---- processed ' + col + '----')
